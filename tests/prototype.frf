: test
  var! f var! e var! d
  var a var b var c
  'true' a !
  "b" b !
  b c !
  a b c d e f debug_line 

;

1 2 3 test depth popn

exit
"abcbcba" "b" explode
"hello world" " " explode
popn popn

"a b c d" "_" " " subst debug_line
depth popn

"foobar" "foo" stringpfx debug_line pop
"foobar" "buzz" stringpfx debug_line pop
"" "foo" stringpfx debug_line pop
"foo" "" stringpfx debug_line pop

"testing" 2 3 midstr debug_line pop
"testing" 20 over strlen 1 + midstr debug_line pop
"  asdf  " " " explode debug_line popn

"a" "b" "c" debug_line
2 dupn debug_line nip debug_line nip debug_line depth popn
"a" "b" "c" "d" "e" 3 debug_line put debug_line 

string? number? atom? depth popn

: fizz ( i -- i s )
  dup case
    3 % 0 = when
      dup 5 % 0 = if
        "fizzbuzz"
      else 
        "fizz"
      then
    end
    5 % 0 = when
      "buzz"
    end
    default
      intostr
    end
  endcase
  " " strcat
;

: fizzbuzz( i -- )
"" 1 begin
  fizz rot swap strcat swap
  dup 10 % 0 = if
    swap "\n" strcat . "" swap
  then
  1 + dup 4 pick >
until
pop . pop
;

137 fizzbuzz

(
1 begin 
    dup 3 = if
        2 .
        break
    then
    dup 5 = if
        break
    then
    1 + dup 5 >
until
)
(
1  11 1 cjmp 2 3 -4 6
depth popn
1 1 +
4 *
3 -
2 /
0 if 2 then 3
)